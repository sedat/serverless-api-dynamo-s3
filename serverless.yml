# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myserverlessproject
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

plugins:
    - serverless-s3-sync
    - serverless-webpack

package:
    individually: true

custom:
    tableName: player-points
    bucketName: myserverlessbucket-683
    s3Sync:
        - bucketName: ${self:custom.bucketName}
          localDir: UploadData

provider:
    name: aws
    runtime: nodejs12.x
    lambdaHashingVersion: 20201221
    profile: serverlessUser
    region: eu-central-1
    apiGateway:
        apiKeys:
            - free:
                  - freeApiKey
            - paid:
                  - paidApiKey
        usagePlan:
            - free:
                  quota:
                      limit: 1000
                      period: MONTH
                  throttle:
                      rateLimit: 5
                      burstLimit: 20
            - paid:
                  quota:
                      limit: 10000
                      period: MONTH
                  throttle:
                      rateLimit: 50
                      burstLimit: 200
    environment:
        tableName: ${self:custom.tableName}
        bucketName: ${self:custom.bucketName}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:*
              - s3:*
          Resource: "*"

resources:
    Resources:
        DemoBucketUpload:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucketName}
        DynamoDBTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: ID
                      AttributeType: S
                KeySchema:
                    - AttributeName: ID
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
    getUser:
        handler: lambdas/endpoints/getUser.handler
        events:
            - http:
                  method: GET
                  path: /get-user/{ID}
                  cors: true
    getPlayerScore:
        handler: lambdas/endpoints/getPlayerScore.handler
        events:
            - http:
                  method: GET
                  path: /get-player-score/{ID}
                  cors: true
    createPlayerScore:
        handler: lambdas/endpoints/createPlayerScore.handler
        events:
            - http:
                  method: POST
                  path: /create-player-score/{ID}
                  cors: true
                  private: true
    updatePlayerScore:
        handler: lambdas/endpoints/updatePlayerScore.handler
        events:
            - http:
                  method: PUT
                  path: /update-player-score/{ID}
                  cors: true
                  private: true
    createFile:
        handler: lambdas/endpoints/createFile.handler
        events:
            - http:
                  method: POST
                  path: /create-file/{fileName}
                  cors: true
                  private: true
    getFile:
        handler: lambdas/endpoints/getFile.handler
        events:
            - http:
                  method: GET
                  path: /get-file/{fileName}
                  cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
